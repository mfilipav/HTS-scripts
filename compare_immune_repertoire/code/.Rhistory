tutorial
tutorial?
eu
?tutorial
??tutorial
help.start()
x <- rnorm(50)
y <- rnorm(x)
polt(x,y)
plot(x, y)
ls.diag()
ls()
rm()
ls()
rm(x,y)
ls()
x <- 1:20
x
w <- 1 + sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
fm
summary(fm)
plot(x, y)
plot(dummy)
clear
clear()
rm(w, x)
rm(dummy, fm)
filepath <- system.file("data", "morley.tab" , package="datasets")
file.show(filepath)
mm <- read.table(filepath)
mm
mm$Expt <- factor(mm$Expt)
mm$Run <- factor(mm$Run)
mm
attach(mm)
mm
plot(Expt, Speed, main="Speed of Light Data", xlab="Experiment No.")
fm <- aov(Speed ~ Run + Expt, data=mm)
summary(fm)
attributes(mm)
fm
attributes(fm)
e <-numeric()
e[3] <- 17
e
e[1:10] <- 1:10
e
e5 <- e[2 * 1:5]
e5 <- e[2 * e]
e5 <- e[2 * 1:10]
e5
attributes(e)
setwd("~/pegs/PEGS_2017_EnkelejdaMiho/code")
## Install R packages
source("http://www.bioconductor.org/biocLite.R")
biocLite()
install.packages(c("ggplot2", "knitr"),
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
## Load R packages
library("ggplot2")
library("knitr")
## ----help_in_R
apropos("mean") # Returns the names of all objects in the search
example("mean") # Examples part of R's online help
help("mean") # Require help regarding the function "mean", equivalent to "?mean".
# Documentation on a topic with name (typically, an R object or a data set)
# can be displayed by either help("name") or ?name.
?mean # Access the documentation on a topic with name (e.g. "mean")
?plot # Access the documentation on a topic (e.g. "plot")
??mean # Search the Help System
## ----load_all_packages
install.packages(c("pcaMethods", "reshape", "phylotools", "VennDiagram",
"fastmatch", "HDMD","pcaMethods","ConsensusClusterPlus",
"corrgram", "igraph", "NMF"))
library(pcaMethods)# not available
biocLite("pcaMethods")
library(seqinr)
library(RColorBrewer)
library(xtable)
library(plyr)
library(ggplot2)
library(ShortRead)
library(grid)
library(reshape)#
library(ape)
library(phylotools)#
library(stringr)
library(gridExtra)
library(hexbin)
library(data.table)
library(VennDiagram)#
library(scales)
library(fastmatch)#
library(HDMD)#
library(Biobase)
library(pcaMethods)# not available, repeat
library(Biostrings)
library(stringdist)
library(ConsensusClusterPlus)# not available
biocLite("ConsensusClusterPlus")
library(Hmisc)
library(gplots)
library(corrgram)#
library(igraph)#
library(NMF)#
## ----data_structures_vector, message=FALSE, warning=FALSE----------------
# Put elements into a numeric vector with the c function,
# "combine" or "concatenate"
cdr3_lengths <- c(11, 15, 22, 12, 17, 20, 19, 12, 21, 19)
# Store the mean as its own object
mean_cdr3_lengths <- mean(cdr3_lengths) # try sum(), range(), max()
# Print the result
print(mean_cdr3_lengths)
# set.seed makes the sampling reproducible
set.seed(1)
### Character vector of 10 random sequences
#! Samples from given letters to create 4 - 20 aa length cdr3s, repeats 10 times
cdr3_sequences <- replicate(10,
paste0("CAR", paste(sample(unlist(strsplit('ACDEFGHIKLMNPQRSTVWY', "")),
sample(4:20,1)), collapse = ""), "W"))
# Returns the length of the generated CDR3s
nchar(cdr3_sequences)
# Over-write an object
# cdr3_lengths <- nchar(cdr3_sequences)
cdr3_lengths
nchar(cdr3_sequences)
### Logical vector
cdr3_lengths %in% nchar(cdr3_sequences)
# NOT: !x
cdr3_lengths[!cdr3_lengths==22] # all values excluding 22
# AND: x&y
# OR: x|y
# XOR, indicates elementwise exclusive OR: xor(x,y)
# Mixed vector and missing data
print(cdr3_sequences[2])
set.seed(1)
mixed_vector <- c(c(rep("A",3), "B"),
sample(cdr3_sequences, 4),
seq(3, 13, 3))
print(as.numeric(mixed_vector))
mean(as.numeric(mixed_vector))
mean(as.numeric(mixed_vector), na.rm = T)
which_lengths_overlap <- intersect(cdr3_lengths, nchar(cdr3_sequences))
print(which_lengths_overlap)
library(VennDiagram) # Load package "VennDiagram"
pdf("figure/overlap_cdr3_lengths.pdf") # Uncomment this line to produce file
venn_r1_r2 <- venn.diagram(list("Repertoire 1" = cdr3_lengths,
"Repertoire 2" = nchar(cdr3_sequences)),
filename = NULL, print.mode = "raw",
#set print.mode = "perc", for percentage display
fill = c("blue",  "orange"),
cex = 1, fontfamily = "sans",
cat.cex = 1, cat.dist = c(0.1,0.1),
cat.fontface = "bold",
cat.fontfamily = "sans", margin = 0.1)
grid.draw(venn_r1_r2)
dev.off() # Uncomment this line to produce the pdf file
matrix_example <- matrix(mixed_vector, nrow = 4, ncol = 3)
matrix_example
matrix_by_row <- matrix(mixed_vector, nrow = 4, ncol = 3,
byrow = T)
matrix_by_row
dataframe_example <- as.data.frame(matrix_example)
colnames(dataframe_example) <- c("Sample", "CDR3", "Abundance")
rownames(dataframe_example) <- c(1:nrow(dataframe_example))
dataframe_example
dataframe_example$Vgene <- c("V1-2", "V1-69", "V3-46", "V5-1")
array_example <- array(0, dim = c(2, 3, 2))
list_example <- list(cdr3_lengths, cdr3_sequences, dataframe_example,
matrix_example, array_example)
list_example
cdr3_lengths
cdr3_lengths + 1 # Result is each element of the vector +1:
?tapply
